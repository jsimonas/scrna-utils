#!/usr/bin/env python3
import os
import sys
import pysam
import argparse
import pandas as pd

# script to tag BAM generated by SEQC

def add_gene_tags(bam, outbam, gtf, threads):
    
    sbam = bam+'sorted'
    pysam.sort("-o", sbam, bam)
    
    pysam.index(sbam)
    
    inp = pysam.AlignmentFile(sbam, 'rb', threads = threads)
    out = pysam.AlignmentFile(outbam, 'wb', template = inp, threads = threads)
    gtf = pysam.TabixFile(gtf)
    
    
    for read in inp.fetch():
        chrom = inp.get_reference_name(read.reference_id)
        start = read.reference_start
        end = read.reference_end
        
        for record in gtf.fetch(chrom, start, end):
            fields = record.strip().split("\t")
            if fields[2] == "gene":
                gene_start = int(fields[3])
                gene_end = int(fields[4])
                gene_name = fields[8].split(";")[0].split('"')[1]
            if start <= gene_end and end >= gene_start:
                read.set_tag("GN", gene_name)
    out.write(read)
        
    inp.close()
    out.close()
    gtf.close()
    
    os.remove(sbam)
    os.remove(sbam+'.bai')

def main():
    parser = argparse.ArgumentParser(add_help=True)
    parser.add_argument('--bam', type=str, metavar='FILENAME',
                        help='path to input BAM file')
    parser.add_argument('--out', type=str, metavar='FILENAME',
                        help='path to output bam file')
    parser.add_argument('--gtf', type=str, metavar='FILENAME',
                        help='path to input gtf file')
    parser.add_argument('--n', type=int, default = 4,
                        help='number of threads to use')
    
    args = parser.parse_args()

    add_gene_tags(bam = args.bam, outbam = args.out, platform = args.gtf, threads = args.n)

if __name__ == "__main__":
    main()
