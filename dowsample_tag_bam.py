#!/usr/bin/env python3
import os
import pysam
import argparse
import pandas as pd
import numpy as np

# scirpt to downsample reads based on tag in BAM
# BAM file was generated by STARsolo and prepared by prepare_bam_tags.py

def downsample_tag(bam, tag, rd_out, ub_out, threads):
    
    pysam.index(bam)
    
    inp = pysam.AlignmentFile(bam, 'rb', threads = threads)
    sample_rates = [0.05, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]
    
    ub_sets = {p: {} for p in sample_rates}
    rd_sets = {p: {} for p in sample_rates}
    
    # set seed
    np.random.seed(0)
    
    # parse bam
    for read in inp.fetch():
        # use primary reads
        if not read.is_supplementary and not read.is_secondary:
            rand_value = np.random.rand()
            # get tags
            tg = read.get_tag(tag)
            ub = read.get_tag('UB')
            gn = read.get_tag('GN')
            # condense umis and genes
            for p in sample_rates:
                if p > rand_value:
                    if tg not in ub_sets[p]:
                        ub_sets[p][tg] = set([])
                        rd_sets[p][tg] = 0
                    elif '-' in {ub, gn}:
                        rd_sets[p][tg] += 1
                    else:
                        ub_sets[p][tg].add((ub, gn))
                        rd_sets[p][tg] += 1
    
    # flatten results
    rd_df = pd.DataFrame.from_dict(rd_sets).fillna(0)
    ub_df = pd.DataFrame.from_dict(ub_sets)
    
    for col in ub_df.columns:
        ub_df[col] = ub_df[col].str.len().to_frame().fillna(0)
    
    # write output
    rd_df.to_csv(rd_out, index_label = 'barcode', sep = '\t')
    ub_df.to_csv(ub_out, index_label = 'barcode', sep = '\t')


def main():
    parser = argparse.ArgumentParser(add_help=True)
    parser.add_argument('--bam', type=str, metavar='FILENAME',
                        help='path to input BAM file')
    parser.add_argument('--tag', type=str,
                        help='tag in BAM which will be counted while downsampling')
    parser.add_argument('--rd_out', type=str, metavar='FILENAME',
                        help='path to output tsv file containing read counts per tag in subsampled fraction')
    parser.add_argument('--ub_out', type=str, metavar='FILENAME',
                        help='path to output tsv file containing UMI (umi + gene) counts per tag in subsampled fraction')
    parser.add_argument('--n', type=int, default = 4,
                        help='number of threads to use')
    
    args = parser.parse_args()

    downsample_tag(
        bam = args.bam,
        tag = args.tag,
        rd_out = args.rd_out,
        ub_out = args.ub_out,
        threads = args.n
    )

if __name__ == "__main__":
    main()
