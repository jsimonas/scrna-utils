#!/usr/bin/env python3
import os
import pysam
import argparse
import pandas as pd

# script to tag BAM generated by SEQC

def add_tags(bam, outbam, threads):
    
    pysam.index(bam)
    
    chrs = [i.split('\t')[0] for i in pysam.idxstats(bam).split('\n')[:-1]]
    
    for chr in chrs:
        if chr == '*':
            chrname = 'unmapped'
        else:
            chrname = chr
        tmp = bam+".tmp."+chrname+".bam"
        inp = pysam.AlignmentFile(bam, 'rb', threads = threads)
        out = pysam.AlignmentFile(tmp, 'wb', template = inp, threads = threads)
        
        for read in inp.fetch(chr):
            qname = read.alignment.query_name            
            cb = qname.split(':')[1]
            ub = qname.split(':')[2]
            read.set_tag(tag = 'CB', value = cb, value_type = 'Z')
            read.set_tag(tag = 'UB', value = ub, value_type = 'Z')
            out.write(read)
    inp.close()
    out.close()
        
    bams = [bam+".tmp."+c+".bam" for c in chrs[:-1]]
    bams.append(bam+".tmp."+"unmapped"+".bam")
    cat_args = ['-o', outbam]+bams
    pysam.cat(*cat_args)
    x = [os.remove(b) for b in bams]


def main():
    parser = argparse.ArgumentParser(add_help=True)
    parser.add_argument('--bam', type=str, metavar='FILENAME',
                        help='path to input BAM file')
    parser.add_argument('--out', type=str, metavar='FILENAME',
                        help='path to output bam file')
    parser.add_argument('--n', type=int, default = 4,
                        help='number of threads to use')
    
    args = parser.parse_args()

    add_tags(bam = args.bam, outbam = args.out, threads = args.n)

if __name__ == "__main__":
    main()
